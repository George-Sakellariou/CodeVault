@model List<Conversation>
@{
    ViewData["Title"] = "CodeVault Chat";
    var currentConversation = ViewBag.CurrentConversation as Conversation;
}

<div class="container-fluid py-4">
    <div class="row">
        <!-- Sidebar with conversation history -->
        <div class="col-lg-3 col-md-4 d-none d-md-block sidebar">
            <div class="card shadow-sm border-0 rounded-4 mb-3">
                <div class="card-header bg-gradient p-3" style="background: linear-gradient(135deg, #4e54c8, #8f94fb);">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="m-0 text-white"><i class="bi bi-chat-left-text me-2"></i>Conversations</h5>
                        <button id="newChatBtn" class="btn btn-light btn-sm">
                            <i class="bi bi-plus-lg"></i> New Chat
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="list-group conversation-list" id="conversationList">
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var conversation in Model)
                            {
                                <a href="@Url.Action("Index", "Chat", new { conversationId = conversation.Id })"
                                   class="list-group-item list-group-item-action border-0 d-flex justify-content-between align-items-center conversation-item @(currentConversation != null && currentConversation.Id == conversation.Id ? "active" : "")"
                                   data-id="@conversation.Id">
                                    <div class="conversation-info">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-chat-text me-2"></i>
                                            <div class="text-truncate conversation-title">@conversation.Title</div>
                                        </div>
                                        <small class="text-muted">
                                            @conversation.UpdatedAt.ToString("MMM d, yyyy h:mm tt")
                                        </small>
                                    </div>
                                    <button class="btn btn-sm btn-outline-danger delete-conversation-btn"
                                            data-id="@conversation.Id" title="Delete conversation">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </a>
                            }
                        }
                        else
                        {
                            <div class="p-4 text-center text-muted">
                                <i class="bi bi-chat-square-text mb-2" style="font-size: 2rem;"></i>
                                <p>No conversations yet</p>
                                <p>Start a new chat to begin</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Main chat area -->
        <div class="col-lg-9 col-md-8 col-sm-12">
            <div class="card shadow-sm border-0 rounded-4 overflow-hidden">
                <div class="card-header bg-gradient p-3 d-flex justify-content-between align-items-center" style="background: linear-gradient(135deg, #4e54c8, #8f94fb);">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-code-square text-white me-2" style="font-size: 1.8rem;"></i>
                        <h3 class="m-0 text-white">CodeVault - Code Assistant</h3>
                    </div>
                    <div class="d-md-none">
                        <button class="btn btn-light btn-sm" id="mobileSidebarToggle">
                            <i class="bi bi-list"></i> Chats
                        </button>
                    </div>
                </div>

                <div class="card-body chat-container p-0" id="chatContainer">
                    @if (currentConversation != null && currentConversation.Messages.Any())
                    {
                        @foreach (var message in currentConversation.Messages)
                        {
                            <div class="message @(message.IsFromUser ? "user-message" : "ai-message") mb-3 p-0">
                                @if (message.IsFromUser)
                                {
                                    <div class="d-flex justify-content-end">
                                        <div class="message-content p-3 rounded-3 bg-primary text-white max-w-75">
                                            @Html.Raw(message.Content.Replace("\n", "<br>"))
                                            <div class="message-time text-end mt-1">
                                                <small class="opacity-75">@message.Timestamp.ToString("h:mm tt")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex">
                                        <div class="avatar bg-primary rounded-circle d-flex justify-content-center align-items-center me-2" style="width: 38px; height: 38px; min-width: 38px;">
                                            <i class="bi bi-code-square text-white"></i>
                                        </div>
                                        <div class="message-content p-3 rounded-3 bg-light max-w-75">
                                            @Html.Raw(processContent(message.Content))
                                            <div class="message-time text-end mt-1">
                                                <small class="text-muted">@message.Timestamp.ToString("h:mm tt")</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="p-4 bg-light text-center" id="welcome-message">
                            <i class="bi bi-code-square mb-3" style="font-size: 3rem; color: #4e54c8;"></i>
                            <h4>Welcome to CodeVault Chat</h4>
                            <p class="text-muted">I'm your AI code assistant powered by both general knowledge and our custom code repository. How can I help you today?</p>
                            <div class="row mt-4">
                                <div class="col-md-4">
                                    <div class="card mb-3">
                                        <div class="card-body text-start">
                                            <h5 class="card-title"><i class="bi bi-lightbulb me-2"></i>Explain Code</h5>
                                            <p class="card-text small">Ask me to explain how any code snippet works or what it does.</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card mb-3">
                                        <div class="card-body text-start">
                                            <h5 class="card-title"><i class="bi bi-arrow-up-right-circle me-2"></i>Optimize Code</h5>
                                            <p class="card-text small">I can suggest improvements and optimizations for your code.</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card mb-3">
                                        <div class="card-body text-start">
                                            <h5 class="card-title"><i class="bi bi-translate me-2"></i>Convert Code</h5>
                                            <p class="card-text small">Ask me to convert code between different programming languages.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="card-footer border-0 p-3 bg-white">
                    <div class="input-group">
                        <textarea id="messageInput" class="form-control" placeholder="Type your code-related question..." rows="1"></textarea>
                        <button id="sendButton" class="btn btn-primary px-4">
                            <i class="bi bi-send-fill"></i>
                        </button>
                    </div>
                    <div class="text-muted small mt-2">
                        <i class="bi bi-info-circle"></i>
                        Try asking: "Explain how promises work in JavaScript" or "What's the difference between ArrayList and LinkedList in Java?"
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Sidebar Overlay -->
<div class="sidebar-overlay d-md-none" id="sidebarOverlay"></div>
<div class="mobile-sidebar d-md-none" id="mobileSidebar">
    <div class="mobile-sidebar-header p-3 bg-gradient text-white" style="background: linear-gradient(135deg, #4e54c8, #8f94fb);">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="m-0"><i class="bi bi-chat-left-text me-2"></i>Conversations</h5>
            <button class="btn-close btn-close-white" id="closeSidebar"></button>
        </div>
    </div>
    <div class="mobile-sidebar-body p-0" id="mobileSidebarContent">
        <!-- Will be populated with conversation list -->
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this conversation? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@functions {
    public string processContent(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        // Replace ** for bold
        content = System.Text.RegularExpressions.Regex.Replace(content, @"\*\*(.*?)\*\*", "<strong>$1</strong>");

        // Replace * or _ for italic
        content = System.Text.RegularExpressions.Regex.Replace(content, @"(\*|_)(.*?)(\*|_)", "<em>$2</em>");

        // Handle code blocks with syntax highlighting
        content = System.Text.RegularExpressions.Regex.Replace(
            content, 
            @"```([a-zA-Z0-9]+)?\n([\s\S]*?)```", 
            m => {
                string language = string.IsNullOrEmpty(m.Groups[1].Value) ? "" : $" class=\"language-{m.Groups[1].Value.ToLower()}\"";
                return $"<pre><code{language}>{m.Groups[2].Value}</code></pre>";
            }
        );

        // Replace ` for inline code
        content = System.Text.RegularExpressions.Regex.Replace(content, @"`(.*?)`", "<code class=\"bg-light px-1 rounded\">$1</code>");

        // Replace URLs with links
        content = System.Text.RegularExpressions.Regex.Replace(content, @"(https?:\/\/[^\s]+)", "<a href=\"$1\" target=\"_blank\">$1</a>");

        // Replace line breaks with <br>
        content = content.Replace("\n", "<br>");

        return content;
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Current conversation ID (if any)
            let currentConversationId = @(currentConversation != null ? currentConversation.Id : 0);
            let isDeleteModalOpen = false;

            // Initialize highlight.js
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightBlock(block);
                });
            });

            // Re-run syntax highlighting after dynamic content is added
            function applyHighlighting() {
                setTimeout(() => {
                    document.querySelectorAll('pre code').forEach((block) => {
                        hljs.highlightBlock(block);
                    });
                }, 100);
            }

            // Auto-resize the textarea as user types
            const messageInput = document.getElementById('messageInput');
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
                // Limit to 5 rows max
                if (this.scrollHeight > 150) {
                    this.style.overflowY = 'auto';
                    this.style.height = '150px';
                } else {
                    this.style.overflowY = 'hidden';
                }
            });

            // Scroll to bottom of chat container
            function scrollToBottom() {
                const chatContainer = document.getElementById('chatContainer');
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            // Initial scroll to bottom if there are messages
            scrollToBottom();

            // Send message on button click or Enter key
            $("#sendButton").click(sendMessage);
            $("#messageInput").keypress(function(e) {
                if (e.which == 13 && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // New chat button
            $("#newChatBtn").click(function() {
                // Clear message input and chat container
                $("#messageInput").val("");
                $("#chatContainer").html(`
                    <div class="p-4 bg-light text-center" id="welcome-message">
                        <i class="bi bi-code-square mb-3" style="font-size: 3rem; color: #4e54c8;"></i>
                        <h4>Welcome to CodeVault Chat</h4>
                        <p class="text-muted">I'm your AI code assistant powered by both general knowledge and our custom code repository. How can I help you today?</p>
                        <div class="row mt-4">
                            <div class="col-md-4">
                                <div class="card mb-3">
                                    <div class="card-body text-start">
                                        <h5 class="card-title"><i class="bi bi-lightbulb me-2"></i>Explain Code</h5>
                                        <p class="card-text small">Ask me to explain how any code snippet works or what it does.</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mb-3">
                                    <div class="card-body text-start">
                                        <h5 class="card-title"><i class="bi bi-arrow-up-right-circle me-2"></i>Optimize Code</h5>
                                        <p class="card-text small">I can suggest improvements and optimizations for your code.</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mb-3">
                                    <div class="card-body text-start">
                                        <h5 class="card-title"><i class="bi bi-translate me-2"></i>Convert Code</h5>
                                        <p class="card-text small">Ask me to convert code between different programming languages.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `);

                // Reset current conversation ID
                currentConversationId = 0;

                // Update active state in sidebar
                $(".conversation-item").removeClass("active");
            });

            // Send message function
            function sendMessage() {
                const message = $("#messageInput").val().trim();
                if (message === "") return;

                // Clear welcome message if present
                $("#welcome-message").hide();

                // Add user message to chat
                addMessageToChat(message, true);
                $("#messageInput").val("");
                messageInput.style.height = 'auto'; // Reset textarea height

                // Add typing indicator
                const typingIndicator = $(`
                    <div class="message mb-2 p-3 rounded bg-light typing-indicator">
                        <div class="d-flex align-items-center">
                            <div class="avatar bg-primary rounded-circle d-flex justify-content-center align-items-center me-2">
                                <i class="bi bi-code-square text-white"></i>
                            </div>
                            <div class="typing-dots">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>
                `);
                $("#chatContainer").append(typingIndicator);
                scrollToBottom();

                // Send to server
                $.ajax({
                    url: '@Url.Action("SendMessage", "Chat")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        content: message,
                        conversationId: currentConversationId
                    }),
                    success: function(response) {
                        // Remove typing indicator
                        $(".typing-indicator").remove();

                        // Add AI response
                        addMessageToChat(response.message.content, false);
                        
                        // Apply syntax highlighting
                        applyHighlighting();

                        // Update the current conversation ID if this is a new conversation
                        if (currentConversationId === 0) {
                            currentConversationId = response.conversationId;
                            // Refresh conversation list
                            refreshConversationList();
                        }
                    },
                    error: function() {
                        // Remove typing indicator
                        $(".typing-indicator").remove();
                        addMessageToChat("Sorry, I couldn't process your request. Please try again.", false);
                    }
                });
            }

            // Add message to the chat
            function addMessageToChat(content, isFromUser) {
                const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                let messageDiv;

                if (isFromUser) {
                    messageDiv = $(`
                        <div class="message user-message mb-3 p-0">
                            <div class="d-flex justify-content-end">
                                <div class="message-content p-3 rounded-3 bg-primary text-white max-w-75">
                                    ${escapeHtml(content)}
                                    <div class="message-time text-end mt-1">
                                        <small class="opacity-75">${timestamp}</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `);
                } else {
                    // Process markdown-like formatting in AI responses
                    const processedContent = processContent(content);

                    messageDiv = $(`
                        <div class="message ai-message mb-3 p-0">
                            <div class="d-flex">
                                <div class="avatar bg-primary rounded-circle d-flex justify-content-center align-items-center me-2" style="width: 38px; height: 38px; min-width: 38px;">
                                    <i class="bi bi-code-square text-white"></i>
                                </div>
                                <div class="message-content p-3 rounded-3 bg-light max-w-75">
                                    ${processedContent}
                                    <div class="message-time text-end mt-1">
                                        <small class="text-muted">${timestamp}</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `);
                }

                $("#chatContainer").append(messageDiv);
                scrollToBottom();
            }

            // Process content for better formatting
            function processContent(content) {
                // Replace ** for bold
                content = content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

                // Replace * or _ for italic
                content = content.replace(/(\*|_)(.*?)(\*|_)/g, '<em>$2</em>');

                // Replace ``` for code blocks with language detection
                content = content.replace(/```([a-zA-Z0-9]+)?\n([\s\S]*?)```/g, function(match, language, code) {
                    const lang = language ? ` class="language-${language}"` : '';
                    return `<pre><code${lang}>${code}</code></pre>`;
                });

                // Replace ` for inline code
                content = content.replace(/`(.*?)`/g, '<code class="bg-light px-1 rounded">$1</code>');

                // Replace URLs with links
                content = content.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');

                // Replace line breaks with <br>
                content = content.replace(/\n/g, '<br>');

                return content;
            }

            // Escape HTML to prevent XSS in user messages
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;")
                    .replace(/\n/g, '<br>');
            }

            // Refresh conversation list
            function refreshConversationList() {
                $.ajax({
                    url: '@Url.Action("GetConversations", "Chat")',
                    type: 'GET',
                    success: function(data) {
                        updateConversationList(data);
                    }
                });
            }

            // Update conversation list in sidebar
            function updateConversationList(conversations) {
                const listEl = $("#conversationList");
                const mobileListEl = $("#mobileSidebarContent");

                // Clear current list
                listEl.empty();
                mobileListEl.empty();

                if (conversations && conversations.length > 0) {
                    const listItems = conversations.map(conversation => {
                        const formattedDate = new Date(conversation.updatedAt).toLocaleDateString('en-US', {
                            month: 'short',
                            day: 'numeric',
                            year: 'numeric',
                            hour: 'numeric',
                            minute: 'numeric',
                            hour12: true
                        });

                        const activeClass = conversation.id === currentConversationId ? "active" : "";

                        return `
                            <a href="@Url.Action("Index", "Chat")?conversationId=${conversation.id}"
                               class="list-group-item list-group-item-action border-0 d-flex justify-content-between align-items-center conversation-item ${activeClass}"
                               data-id="${conversation.id}">
                                <div class="conversation-info">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-chat-text me-2"></i>
                                        <div class="text-truncate conversation-title">${conversation.title}</div>
                                    </div>
                                    <small class="text-muted">
                                        ${formattedDate}
                                    </small>
                                </div>
                                <button class="btn btn-sm btn-outline-danger delete-conversation-btn"
                                        data-id="${conversation.id}" title="Delete conversation">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </a>
                        `;
                    }).join('');

                    listEl.html(listItems);
                    mobileListEl.html(listItems);
                } else {
                    const emptyMessage = `
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-chat-square-text mb-2" style="font-size: 2rem;"></i>
                            <p>No conversations yet</p>
                            <p>Start a new chat to begin</p>
                        </div>
                    `;

                    listEl.html(emptyMessage);
                    mobileListEl.html(emptyMessage);
                }
            }

            // Delete conversation
            $(document).on('click', '.delete-conversation-btn', function(e) {
                e.preventDefault();
                e.stopPropagation();

                const conversationId = $(this).data('id');

                // Store the ID for deletion
                $('#confirmDelete').data('id', conversationId);

                // Show confirmation modal
                const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
                modal.show();
                isDeleteModalOpen = true;
            });

            // Confirm delete conversation
            $('#confirmDelete').click(function() {
                const conversationId = $(this).data('id');

                $.ajax({
                    url: '@Url.Action("DeleteConversation", "Chat")',
                    type: 'DELETE',
                    data: { id: conversationId },
                    success: function() {
                        // Hide modal
                        $('#deleteModal').modal('hide');
                        isDeleteModalOpen = false;

                        // If deleted the current conversation, start a new one
                        if (conversationId === currentConversationId) {
                            // Clear interface and reset ID
                            $("#newChatBtn").click();
                        }

                        // Refresh conversation list
                        refreshConversationList();
                    },
                    error: function() {
                        alert('Failed to delete conversation. Please try again.');
                    }
                });
            });

            // Mobile sidebar toggle
            $('#mobileSidebarToggle').click(function() {
                $('#mobileSidebar').addClass('active');
                $('#sidebarOverlay').addClass('active');
                $('body').addClass('sidebar-open');
            });

            $('#closeSidebar, #sidebarOverlay').click(function() {
                $('#mobileSidebar').removeClass('active');
                $('#sidebarOverlay').removeClass('active');
                $('body').removeClass('sidebar-open');
            });

            // Handle conversation item click on mobile
            $(document).on('click', '.conversation-item', function(e) {
                if (window.innerWidth < 768 && !isDeleteModalOpen) {
                    // Only close sidebar if not clicking delete button and on mobile
                    $('#closeSidebar').click();
                }
            });

            // Close modal on hidden event
            $('#deleteModal').on('hidden.bs.modal', function() {
                isDeleteModalOpen = false;
            });
        });
    </script>

    <style>
        .chat-container {
            height: 500px;
            overflow-y: auto;
            background-color: #f9f9fb;
            border-top: 1px solid rgba(0,0,0,0.05);
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }

        .max-w-75 {
            max-width: 75%;
        }

        #messageInput {
            resize: none;
            overflow-y: hidden;
            min-height: 38px;
            max-height: 150px;
            border-radius: 20px;
        }

        /* Code formatting */
        .message pre {
            margin: 0.5rem 0;
            padding: 0;
            background-color: #1e1e1e;
            border-radius: 0.5rem;
            overflow: hidden;
        }

            .message pre code {
                display: block;
                padding: 1rem;
                font-family: 'JetBrains Mono', monospace;
                font-size: 0.9rem;
                line-height: 1.5;
                overflow-x: auto;
            }

        .message code {
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.9rem;
            border-radius: 0.2rem;
        }

        /* Typing indicator */
        .typing-dots {
            display: flex;
            align-items: center;
        }

            .typing-dots span {
                height: 8px;
                width: 8px;
                border-radius: 50%;
                background-color: #4e54c8;
                display: inline-block;
                margin-right: 5px;
                animation: typing-animation 1s infinite ease-in-out;
            }

                .typing-dots span:nth-child(1) {
                    animation-delay: 0s;
                }

                .typing-dots span:nth-child(2) {
                    animation-delay: 0.2s;
                }

                .typing-dots span:nth-child(3) {
                    animation-delay: 0.4s;
                    margin-right: 0;
                }

        @@keyframes typing-animation {
            0%

        {
            transform: scale(1);
            opacity: 0.8;
        }

        50% {
            transform: scale(1.3);
            opacity: 1;
        }

        100% {
            transform: scale(1);
            opacity: 0.8;
        }

        }

        /* Conversation sidebar */
        .sidebar {
            max-height: calc(100vh - 120px);
        }

        .conversation-list {
            max-height: calc(100vh - 180px);
            overflow-y: auto;
        }

        .conversation-item {
            position: relative;
            transition: background-color 0.2s ease;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid rgba(0,0,0,0.05) !important;
        }

            .conversation-item:hover {
                background-color: rgba(0,0,0,0.02);
            }

            .conversation-item.active {
                background-color: rgba(55, 64, 255, 0.05);
                border-left: 3px solid #3740ff !important;
            }

        .conversation-title {
            font-weight: 500;
            max-width: 180px;
        }

        .conversation-item .delete-conversation-btn {
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .conversation-item:hover .delete-conversation-btn {
            opacity: 1;
        }

        .conversation-info {
            width: 100%;
            margin-right: 10px;
        }

        /* Mobile sidebar */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1040;
            display: none;
        }

            .sidebar-overlay.active {
                display: block;
            }

        .mobile-sidebar {
            position: fixed;
            top: 0;
            left: -100%;
            width: 80%;
            height: 100%;
            background-color: white;
            z-index: 1050;
            transition: left 0.3s ease;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }

            .mobile-sidebar.active {
                left: 0;
            }

        .mobile-sidebar-body {
            height: calc(100% - 60px);
            overflow-y: auto;
        }

        body.sidebar-open {
            overflow: hidden;
        }

        /* Responsive adjustments */
        @@media (max-width: 767px) {
            .chat-container

        {
            height: calc(100vh - 240px);
        }

        }
    </style>
}