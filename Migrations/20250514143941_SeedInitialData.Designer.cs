// <auto-generated />
using System;
using CodeVault.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeVault.Migrations
{
    [DbContext(typeof(CodeDbContext))]
    [Migration("20250514143941_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeVault.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFromUser")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CodeVault.Models.CodeEmbedding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeSnippetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmbeddingPlaceholder")
                        .IsRequired()
                        .HasColumnType("vector(1536)")
                        .HasColumnName("Embedding");

                    b.HasKey("Id");

                    b.HasIndex("CodeSnippetId");

                    b.ToTable("CodeEmbeddings");
                });

            modelBuilder.Entity("CodeVault.Models.CodePerformanceMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeSnippetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetricValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodeSnippetId");

                    b.ToTable("CodePerformanceMetrics");
                });

            modelBuilder.Entity("CodeVault.Models.CodeSecurityScan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeSnippetId")
                        .HasColumnType("integer");

                    b.Property<int>("CriticalIssues")
                        .HasColumnType("integer");

                    b.Property<string>("FindingsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HighIssues")
                        .HasColumnType("integer");

                    b.Property<int>("LowIssues")
                        .HasColumnType("integer");

                    b.Property<int>("MediumIssues")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scanner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SecurityScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CodeSnippetId");

                    b.HasIndex("ScanDate");

                    b.ToTable("CodeSecurityScans");
                });

            modelBuilder.Entity("CodeVault.Models.CodeSnippet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer");

                    b.Property<string>("TagString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CodeSnippets");
                });

            modelBuilder.Entity("CodeVault.Models.CodeTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CodeTags");
                });

            modelBuilder.Entity("CodeVault.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("CodeVault.Models.ChatMessage", b =>
                {
                    b.HasOne("CodeVault.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("CodeVault.Models.CodeEmbedding", b =>
                {
                    b.HasOne("CodeVault.Models.CodeSnippet", "CodeSnippet")
                        .WithMany()
                        .HasForeignKey("CodeSnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSnippet");
                });

            modelBuilder.Entity("CodeVault.Models.CodePerformanceMetric", b =>
                {
                    b.HasOne("CodeVault.Models.CodeSnippet", "CodeSnippet")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("CodeSnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSnippet");
                });

            modelBuilder.Entity("CodeVault.Models.CodeSecurityScan", b =>
                {
                    b.HasOne("CodeVault.Models.CodeSnippet", "CodeSnippet")
                        .WithMany("SecurityScans")
                        .HasForeignKey("CodeSnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSnippet");
                });

            modelBuilder.Entity("CodeVault.Models.CodeSnippet", b =>
                {
                    b.Navigation("PerformanceMetrics");

                    b.Navigation("SecurityScans");
                });

            modelBuilder.Entity("CodeVault.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
